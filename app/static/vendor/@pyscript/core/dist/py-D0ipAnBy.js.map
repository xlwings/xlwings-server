{"version":3,"file":"py-D0ipAnBy.js","sources":["../src/plugins/py-terminal/py.js"],"sourcesContent":["// PyScript py-terminal plugin\nimport { defineProperties } from \"polyscript/exports\";\nimport { hooks } from \"../../core.js\";\n\nconst bootstrapped = new WeakSet();\n\n// this callback will be serialized as string and it never needs\n// to be invoked multiple times. Each xworker here is bootstrapped\n// only once thanks to the `sync.is_pyterminal()` check.\nconst workerReady = ({ interpreter, io, run, type }, { sync }) => {\n    if (type !== \"py\" || !sync.is_pyterminal()) return;\n\n    run(\n        [\n            \"from polyscript import currentScript as _\",\n            \"__terminal__ = _.terminal\",\n            \"del _\",\n        ].join(\";\"),\n    );\n\n    let data = \"\";\n    const { pyterminal_read, pyterminal_write } = sync;\n    const decoder = new TextDecoder();\n    const generic = {\n        isatty: false,\n        write(buffer) {\n            data = decoder.decode(buffer);\n            pyterminal_write(data);\n            return buffer.length;\n        },\n    };\n\n    io.stderr = (error) => {\n        pyterminal_write(String(error.message || error));\n    };\n\n    interpreter.setStdout(generic);\n    interpreter.setStderr(generic);\n    interpreter.setStdin({\n        isatty: false,\n        stdin: () => pyterminal_read(data),\n    });\n};\n\nexport default async (element) => {\n    // lazy load these only when a valid terminal is found\n    const [{ Terminal }, { Readline }, { FitAddon }, { WebLinksAddon }] =\n        await Promise.all([\n            import(/* webpackIgnore: true */ \"../../3rd-party/xterm.js\"),\n            import(\n                /* webpackIgnore: true */ \"../../3rd-party/xterm-readline.js\"\n            ),\n            import(\n                /* webpackIgnore: true */ \"../../3rd-party/xterm_addon-fit.js\"\n            ),\n            import(\n                /* webpackIgnore: true */ \"../../3rd-party/xterm_addon-web-links.js\"\n            ),\n        ]);\n\n    const readline = new Readline();\n\n    // common main thread initialization for both worker\n    // or main case, bootstrapping the terminal on its target\n    const init = (options) => {\n        let target = element;\n        const selector = element.getAttribute(\"target\");\n        if (selector) {\n            target =\n                document.getElementById(selector) ||\n                document.querySelector(selector);\n            if (!target) throw new Error(`Unknown target ${selector}`);\n        } else {\n            target = document.createElement(\"py-terminal\");\n            target.style.display = \"block\";\n            element.after(target);\n        }\n        const terminal = new Terminal({\n            theme: {\n                background: \"#191A19\",\n                foreground: \"#F5F2E7\",\n            },\n            ...options,\n        });\n        const fitAddon = new FitAddon();\n        terminal.loadAddon(fitAddon);\n        terminal.loadAddon(readline);\n        terminal.loadAddon(new WebLinksAddon());\n        terminal.open(target);\n        fitAddon.fit();\n        terminal.focus();\n        defineProperties(element, {\n            terminal: { value: terminal },\n            process: {\n                value: async (code) => {\n                    for (const line of code.split(/(?:\\r\\n|\\r|\\n)/)) {\n                        terminal.paste(`${line}`);\n                        terminal.write(\"\\r\\n\");\n                        do {\n                            await new Promise((resolve) =>\n                                setTimeout(resolve, 0),\n                            );\n                        } while (!readline.activeRead?.resolve);\n                        readline.activeRead.resolve(line);\n                    }\n                },\n            },\n        });\n        return terminal;\n    };\n\n    // branch logic for the worker\n    if (element.hasAttribute(\"worker\")) {\n        // add a hook on the main thread to setup all sync helpers\n        // also bootstrapping the XTerm target on main *BUT* ...\n        hooks.main.onWorker.add(function worker(_, xworker) {\n            // ... as multiple workers will add multiple callbacks\n            // be sure no xworker is ever initialized twice!\n            if (bootstrapped.has(xworker)) return;\n            bootstrapped.add(xworker);\n\n            // still cleanup this callback for future scripts/workers\n            hooks.main.onWorker.delete(worker);\n\n            init({\n                disableStdin: false,\n                cursorBlink: true,\n                cursorStyle: \"block\",\n                lineHeight: 1.2,\n            });\n\n            xworker.sync.is_pyterminal = () => true;\n            xworker.sync.pyterminal_read = readline.read.bind(readline);\n            xworker.sync.pyterminal_write = readline.write.bind(readline);\n        });\n\n        // setup remote thread JS/Python code for whenever the\n        // worker is ready to become a terminal\n        hooks.worker.onReady.add(workerReady);\n\n        // @see https://github.com/pyscript/pyscript/issues/2246\n        const patchInput = [\n            \"import builtins as _b\",\n            \"from pyscript import sync as _s\",\n            \"_b.input = _s.pyterminal_read\",\n            \"del _b\",\n            \"del _s\",\n        ].join(\"\\n\");\n\n        hooks.worker.codeBeforeRun.add(patchInput);\n        hooks.worker.codeBeforeRunAsync.add(patchInput);\n    } else {\n        // in the main case, just bootstrap XTerm without\n        // allowing any input as that's not possible / awkward\n        hooks.main.onReady.add(function main({ interpreter, io, run, type }) {\n            if (type !== \"py\") return;\n\n            console.warn(\"py-terminal is read only on main thread\");\n            hooks.main.onReady.delete(main);\n\n            // on main, it's easy to trash and clean the current terminal\n            globalThis.__py_terminal__ = init({\n                disableStdin: true,\n                cursorBlink: false,\n                cursorStyle: \"underline\",\n            });\n            run(\"from js import __py_terminal__ as __terminal__\");\n            delete globalThis.__py_terminal__;\n\n            io.stderr = (error) => {\n                readline.write(String(error.message || error));\n            };\n\n            let data = \"\";\n            const decoder = new TextDecoder();\n            const generic = {\n                isatty: false,\n                write(buffer) {\n                    data = decoder.decode(buffer);\n                    readline.write(data);\n                    return buffer.length;\n                },\n            };\n            interpreter.setStdout(generic);\n            interpreter.setStderr(generic);\n            interpreter.setStdin({\n                isatty: false,\n                stdin: () => readline.read(data),\n            });\n        });\n    }\n};\n"],"names":["bootstrapped","WeakSet","workerReady","interpreter","io","run","type","sync","is_pyterminal","join","data","pyterminal_read","pyterminal_write","decoder","TextDecoder","generic","isatty","write","buffer","decode","length","stderr","error","String","message","setStdout","setStderr","setStdin","stdin","py","async","element","Terminal","Readline","FitAddon","WebLinksAddon","Promise","all","import","readline","init","options","target","selector","getAttribute","document","getElementById","querySelector","Error","createElement","style","display","after","terminal","theme","background","foreground","fitAddon","loadAddon","open","fit","focus","defineProperties","value","process","code","line","split","paste","resolve","setTimeout","activeRead","hasAttribute","hooks","main","onWorker","add","worker","_","xworker","has","delete","disableStdin","cursorBlink","cursorStyle","lineHeight","read","bind","onReady","patchInput","codeBeforeRun","codeBeforeRunAsync","console","warn","globalThis","__py_terminal__"],"mappings":"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"}
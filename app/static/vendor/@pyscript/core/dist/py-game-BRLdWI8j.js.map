{"version":3,"file":"py-game-BRLdWI8j.js","sources":["../src/plugins/py-game.js"],"sourcesContent":["import { dedent, define } from \"polyscript/exports\";\n\nimport { stdlib } from \"../core.js\";\nimport { configDetails } from \"../config.js\";\nimport { getText } from \"../fetch.js\";\n\nconst hooks = {\n    main: {\n        onReady: async (wrap, script) => {\n            if (script.hasAttribute(\"config\")) {\n                const value = script.getAttribute(\"config\");\n                const { json, toml, text } = configDetails(value);\n                let config = {};\n                if (json) config = JSON.parse(text);\n                else if (toml) {\n                    const { parse } = await import(\n                        /* webpackIgnore: true */ \"../3rd-party/toml.js\"\n                    );\n                    config = parse(text);\n                }\n                if (config.packages) {\n                    const micropip = wrap.interpreter.pyimport(\"micropip\");\n                    await micropip.install(config.packages, {\n                        keep_going: true,\n                    });\n                    micropip.destroy();\n                }\n            }\n\n            wrap.interpreter.registerJsModule(\"_pyscript\", {\n                PyWorker() {\n                    throw new Error(\n                        \"Unable to use PyWorker in py-game scripts\",\n                    );\n                },\n                js_import: (...urls) =>\n                    Promise.all(urls.map((url) => import(url))),\n                get target() {\n                    return script.id;\n                },\n            });\n\n            await wrap.interpreter.runPythonAsync(stdlib);\n\n            let code = dedent(script.textContent);\n            if (script.src) code = await fetch(script.src).then(getText);\n\n            const target = script.getAttribute(\"target\") || \"canvas\";\n            const canvas = document.getElementById(target);\n            wrap.interpreter.canvas.setCanvas2D(canvas);\n            await wrap.interpreter.runPythonAsync(code);\n        },\n    },\n};\n\ndefine(\"py-game\", {\n    config: { packages: [\"pygame-ce\"] },\n    configURL: new URL(\"./config.txt\", location.href).href,\n    interpreter: \"pyodide\",\n    env: \"py-game\",\n    hooks,\n});\n"],"names":["hooks","main","onReady","async","wrap","script","hasAttribute","value","getAttribute","json","toml","text","configDetails","config","JSON","parse","import","packages","micropip","interpreter","pyimport","install","keep_going","destroy","registerJsModule","PyWorker","Error","js_import","urls","Promise","all","map","url","target","id","runPythonAsync","stdlib","code","dedent","textContent","src","fetch","then","getText","canvas","document","getElementById","setCanvas2D","define","configURL","URL","location","href","env"],"mappings":"8DAMA,MAAMA,EAAQ,CACVC,KAAM,CACFC,QAASC,MAAOC,EAAMC,KAClB,GAAIA,EAAOC,aAAa,UAAW,CAC/B,MAAMC,EAAQF,EAAOG,aAAa,WAC5BC,KAAEA,EAAIC,KAAEA,EAAIC,KAAEA,GAASC,EAAcL,GAC3C,IAAIM,EAAS,CAAE,EACf,GAAIJ,EAAMI,EAASC,KAAKC,MAAMJ,QACzB,GAAID,EAAM,CACX,MAAMK,MAAEA,SAAgBC,OACM,sBAE9BH,EAASE,EAAMJ,EACnC,CACgB,GAAIE,EAAOI,SAAU,CACjB,MAAMC,EAAWd,EAAKe,YAAYC,SAAS,kBACrCF,EAASG,QAAQR,EAAOI,SAAU,CACpCK,YAAY,IAEhBJ,EAASK,SAC7B,CACA,CAEYnB,EAAKe,YAAYK,iBAAiB,YAAa,CAC3C,QAAAC,GACI,MAAM,IAAIC,MACN,4CAEP,EACDC,UAAW,IAAIC,IACXC,QAAQC,IAAIF,EAAKG,KAAKC,GAAQhB,OAAOgB,MACzC,UAAIC,GACA,OAAO5B,EAAO6B,EACjB,UAGC9B,EAAKe,YAAYgB,eAAeC,GAEtC,IAAIC,EAAOC,EAAOjC,EAAOkC,aACrBlC,EAAOmC,MAAKH,QAAaI,MAAMpC,EAAOmC,KAAKE,KAAKC,IAEpD,MAAMV,EAAS5B,EAAOG,aAAa,WAAa,SAC1CoC,EAASC,SAASC,eAAeb,GACvC7B,EAAKe,YAAYyB,OAAOG,YAAYH,SAC9BxC,EAAKe,YAAYgB,eAAeE,EAAK,IAKvDW,EAAO,UAAW,CACdnC,OAAQ,CAAEI,SAAU,CAAC,cACrBgC,UAAW,IAAIC,IAAI,eAAgBC,SAASC,MAAMA,KAClDjC,YAAa,UACbkC,IAAK,UACLrD"}